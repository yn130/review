<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Animated Cover</title>
  <style>
    @mixin flex-center() {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    $col-bg: #FFC568;
    $col-lttr: #763C8C;
    $col-line: #FFFFFF;
    $to-mobile: 520px;

    *, *:before, *:after {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    html, body {
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: #FFC568;
      font-size: 62.5%;
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    }

    .container {
      width: 50rem;
      height: 20rem;
      position: relative;
    }

    .svg-container {
      z-index: 2;
      position: absolute;
    }

    .mo-container {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .line {
      fill: none;
      stroke: #FFFFFF;
      stroke-width: 8;
      stroke-linecap: round;
      stroke-miterlimit: 10;
    }

    .image {
      width: auto;
      height: 80px;
      transition: opacity 0.5s ease;
    }

    .sound {
      position: fixed;
      color: #763C8C;
      font-size: 1.6rem;
      bottom: 1rem;
      right: 1rem;
      text-decoration: underline;
      cursor: default;
    }
    .sound--off {
      text-decoration: line-through;
    }
  </style>
</head>
<body>
  <div class="container">
    <svg class="svg-container" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 200">
        <line class="line line--left" x1="10" y1="-50" x2="490" y2="-50"></line>
        <line class="line line--right" x1="10" y1="250" x2="490" y2="250"></line>
    </svg>
    <div class="mo-container">
      <img src="./image/fridge.png" alt="Fridge Image" class="image" id="image">
    </div>
  </div>

  <audio class="blup" style="display: none">
    <source src="https://www.freesound.org/data/previews/265/265115_4373976-lq.mp3" type="audio/ogg">
  </audio>
  <audio class="blop" style="display: none">
    <source src="https://www.freesound.org/data/previews/265/265115_4373976-lq.mp3" type="audio/ogg">
  </audio>
  <div class="sound">sound</div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/mo-js/0.288.2/mo.min.js"></script>
  <script>
    const qs = document.querySelector.bind(document);

    const el = {
      container: qs('.mo-container'),
      lineLeft: qs('.line--left'),
      lineRight: qs('.line--right'),
      image: qs('#image'),
      colTxt: "#763c8c",
      colHeart: "#fa4843",
      blup: qs('.blup'),
      blop: qs('.blop'),
      sound: qs('.sound')
    };

    const crtBoom = (delay = 0, x = 0, rd = 46) => {
      parent = el.container;
      const crcl = new mojs.Shape({
        shape:        'circle',
        fill:         'none',
        stroke:        el.colTxt,
        strokeWidth:  { 5 : 0 },
        radius:       { [rd] : [rd + 20] },
        easing:       'quint.out',
        duration:     500 / 3,
        parent,
        delay,
        x
      });
      
      const brst = new mojs.Burst({
        radius:       { [rd + 15] : 110 },
        angle:        'rand(60, 180)',
        count:        3,
        timeline:     { delay },
        parent,
        x,
        children: {
          radius:       [5, 3, 7],
          fill:         el.colTxt,
          scale:        { 1: 0, easing: 'quad.in' },
          pathScale:    [ .8, null ],
          degreeShift:  [ 'rand(13, 60)', null ],
          duration:     1000 / 3,
          easing:       'quint.out'
        }
      });
      
      return [crcl, brst];
    };

    const crtLoveTl = () => {
      const move        = 1000;
      const boom        = 200;
      const easing      = 'sin.inOut';
      const easingBoom  = 'sin.in';
      const easingOut   = 'sin.out';
      const opts        = { duration: move, easing, opacity: 1 };
      const delta       = 150;
      const letterHeight = 50; // I LOVE YOU 글자의 세로 길이
      const lineHeight = 8; // 흰색 선의 높이
      const additionalGap = lineHeight * 2; // 흰색 선의 높이 두 배만큼 추가
      const totalGap = (letterHeight / 2) + additionalGap; // 최종 간격

      return (new mojs.Timeline).add([
        new mojs.Tween({
          duration: move,
          onStart: () => {
          },
          onComplete: () => {
            el.blop.play();
          }
        }),
        
        new mojs.Tween({
          duration: move * 2 + boom,
          onComplete: () => {
            el.blop.play();
          }
        }),
      
        new mojs.Tween({
          duration: move * 3 + boom * 2 - delta,
          onComplete: () => { 
            el.blop.play();
          }
        }),
      
        new mojs.Tween({
          duration: move * 3 + boom * 2,
          onComplete: () => { 
            el.blup.play();
          }
        }),
      
        new mojs.Tween({
          duration: 50,
          delay: 4050,
          onUpdate: (progress) => {
          },
          onComplete: () => {
          }
        }),

        // 위쪽 선이 아래로 내려오는 애니메이션
        new mojs.Tween({
          duration: 4000,
          easing: 'quad.inOut',
          onUpdate: (progress) => {
            const currentY = progress * (100 - totalGap);  // 0에서 100 - totalGap으로 증가
            el.lineLeft.setAttribute('y1', currentY);
            el.lineLeft.setAttribute('y2', currentY);
            
            // 냉장고 이미지 높이 조절 및 이미지 변경
            const fridgeHeight = 80 - (progress * 40); // 40px 감소
            el.image.style.height = `${fridgeHeight}px`;

            // 이미지 변경 로직
            if (progress > 0.9) { // 선이 거의 닫힐 때 이미지 변경
              el.image.src = "./image/zip.png";
            }
          }
        }),

        // 아래쪽 선이 위로 올라가는 애니메이션
        new mojs.Tween({
          duration: 4000,
          easing: 'quad.inOut',
          onUpdate: (progress) => {
            const currentY = 200 - (progress * (100 - totalGap));  // 200에서 100 + totalGap으로 감소
            el.lineRight.setAttribute('y1', currentY);
            el.lineRight.setAttribute('y2', currentY);
          }
        }),

        ...crtBoom(move, -64, 46),
        ...crtBoom(move * 2 + boom, 18, 34),
        ...crtBoom(move * 3 + boom * 2 - delta, -64, 34),
        ...crtBoom(move * 3 + boom * 2, 45, 34)
      ]);
    };

    const loveTl = crtLoveTl().play();
    setInterval(() => { loveTl.replay() }, 4300);

    const volume = 0.2;
    el.blup.volume = volume;
    el.blop.volume = volume;

    const toggleSound = () => {
      let on = true;
      return () => {
        if (on) {
          el.blup.volume = 0.0;
          el.blop.volume = 0.0;
          el.sound.classList.add('sound--off')
        }
        else {
          el.blup.volume = volume;
          el.blop.volume = volume;
          el.sound.classList.remove('sound--off')
        }
        on = !on;
      }
    }
    el.sound.addEventListener('click', toggleSound());
  </script>
</body>
</html>
