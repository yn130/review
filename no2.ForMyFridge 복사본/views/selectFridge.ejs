<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>신선Zip사</title>
  <style>
    /* 기존 스타일 유지 */
    @font-face {
      font-family: 'BMDOHYEON';
      src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_one@1.0/BMDOHYEON.woff') format('woff');
      font-weight: normal;
      font-style: normal;
    }

    :root {
      --size: 180px;
      --gap: 30px 0px;
      --tdeg: 90deg;
      --dr: 200ms;
      --tf: ease-out;
      --pr: 300px;
      --fr: #000;
      --bg: #A7E344;
      --mn: #A7E344;
      --sc: #A7E344;
    }

    body {
      margin: 0;
      font-size: 16px;
      font-family: 'BMDOHYEON', serif;
      color: var(--fr);
      background-color: var(--bg);
      line-height: 1.618;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    ul {
      display: grid;
      grid-template-columns: repeat(2, var(--size));
      grid-template-rows: repeat(2, var(--size));
      gap: var(--gap);
      list-style: none;
      padding: 0;
      margin: 0;
    }

    li {
      position: relative;
      width: var(--size);
      height: var(--size);
      perspective: var(--pr);
      cursor: pointer; /* 추가: 클릭 가능하게 커서 변경 */
    }

    .w {
      font-size: initial;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      pointer-events: none;
      transform-style: preserve-3d;
      transform-origin: 50% 50% calc(var(--size) / 2 * -1);
      will-change: transform;
      animation: var(--dr) var(--tf) 0ms 1 normal forwards paused;
    }

    .f,
    .b {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      color: white;
      transition: none;
    }

    .f {
      background-color: var(--mn);
      background: linear-gradient(var(--mn), var(--sc));
      transform: translate3d(0,0,0);
    }

    .b {
      padding: 1rem;
      background-image: radial-gradient(circle, #A7E344, #A7E344 160%);
      transform: translate3d(0,0,-1px);
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    .b h3 {
      font-size: 20px;
      margin: 0;
    }

    .in-top .b,
    .out-top .b {
      transform-origin: 0% 100%;
      transform: translate3d(0, -100%, 0) rotate3d(1,0,0,90deg);
    }

    .in-right .b,
    .out-right .b {
      transform-origin: 0% 0%;
      transform: translate3d(100%, 0, 0) rotate3d(0,1,0,90deg);
    }

    .in-bottom .b,
    .out-bottom .b {
      transform-origin: 0% 0%;
      transform: translate3d(0, 100%, 0) rotate3d(-1,0,0,90deg);
    }

    .in-left .b,
    .out-left .b {
      transform-origin: 100% 0;
      transform: translate3d(-100%,0,0) rotate3d(0,-1,0,90deg);
    }

    .in-top .w    {animation-name: in-top; animation-play-state: running}
    .in-right .w  {animation-name: in-right; animation-play-state: running}
    .in-bottom .w {animation-name: in-bottom; animation-play-state: running}
    .in-left .w   {animation-name: in-left; animation-play-state: running}

    .out-top .w    {animation-name: out-top; animation-play-state: running}
    .out-right .w  {animation-name: out-right; animation-play-state: running}
    .out-bottom .w {animation-name: out-bottom; animation-play-state: running}
    .out-left .w   {animation-name: out-left; animation-play-state: running}

    @keyframes in-top {
      from  {transform: rotate3d(0,0,0,0deg)}
      to    {transform: rotate3d(-1,0,0,var(--tdeg))}
    }
    @keyframes out-top {
      from {transform: rotate3d(-1,0,0,var(--tdeg))}
      to   {transform: rotate3d(0,0,0,0deg)}
    }

    @keyframes in-right {
      from  {transform: rotate3d(0,0,0,0deg)}
      to    {transform: rotate3d(0,-1,0,var(--tdeg))}
    }
    @keyframes out-right {
      from  {transform: rotate3d(0,-1,0,var(--tdeg))}
      to    {transform: rotate3d(0,0,0,0deg)}
    }

    @keyframes in-bottom {
      from  {transform: rotate3d(0,0,0,0deg)}
      to    {transform: rotate3d(1,0,0,var(--tdeg))}
    }
    @keyframes out-bottom {
      from  {transform: rotate3d(1,0,0,var(--tdeg))}
      to    {transform: rotate3d(0,0,0,0deg)}
    }

    @keyframes in-left {
      from  {transform: rotate3d(0,0,0,0deg)}
      to    {transform: rotate3d(0,1,0,var(--tdeg))}
    }
    @keyframes out-left {
      from  {transform: rotate3d(0,1,0,var(--tdeg))}
      to    {transform: rotate3d(0,0,0,0deg)}
    }

    /* 미디어 쿼리 */
    @media (max-width: 450px) {
      :root {
        --size: 180px;
      }

      @media (max-width: 400px) {
        :root {
          --size: calc(180px * 0.85);
        }
      }

      @media (max-width: 350px) {
        :root {
          --size: calc(180px * 0.85 * 0.85);
        }
      }

      @media (max-width: 300px) {
        :root {
          --size: calc(180px * 0.85 * 0.85 * 0.85);
        }
      }
    }

  </style>
</head>
<body>
  <ul>
    <% 
      const items = [
        { t: '일반형', i: '/images/normalType.png', id: 3 }, // 추가: id로 fridgeTypeID 지정
        { t: '4도어', i: '/images/4Doors.png', id: 1 },
        { t: '양문형', i: '/images/doubleDoor.png', id: 2 },
        { t: '김치냉장고', i: '/images/kimchiType.png', id: 4 }
      ];
      items.forEach(item => { 
    %>
    <li onclick="selectFridgeType(<%= item.id %>)">
      <div class="w">
        <div class="f">
          <svg viewBox="0 0 180 180">
            <image xlink:href="<%= item.i %>" preserveAspectRatio="xMidYMid meet" width="100%" height="100%"></image>
          </svg>
        </div>
        <div class="b">
          <h3><%= item.t %></h3>
        </div>
      </div>
    </li>
    <% }); %>
  </ul>

  <script>

    function selectFridgeType(fridgeTypeID) {
   console.log('Selected Fridge Type ID:', fridgeTypeID); // 확인용 로그

   // 선택된 냉장고 타입을 로컬 스토리지에 저장
   localStorage.setItem('selectedFridgeType', fridgeTypeID);

   // 선택된 냉장고 타입을 서버에 전송
   fetch('/selectFridge', {
     method: 'POST',
     headers: {
       'Content-Type': 'application/json'
     },
     body: JSON.stringify({ fridgeTypeID: fridgeTypeID })
   })
   .then(response => response.json())
   .then(data => {
     if (data.success) {
       // 리다이렉트를 2초 지연시킵니다.
       setTimeout(() => {
         window.location.href = data.redirectUrl;
       }, 500); // 2000 밀리초 (2초) 후에 리다이렉트
     } else {
       alert('Error selecting fridge type');
     }
   })
   .catch(error => console.error('Error:', error));
 }

 // 새로운 이벤트 핸들러 추가
  window.addEventListener('pageshow', function(event) {
    if (event.persisted) { // 페이지가 캐시에서 불러와졌을 때
      document.querySelectorAll('li').forEach(li => {
        li.className = ''; // 각 li 요소의 className을 초기 상태로 설정
      });
    }
  });


    // 기존 3D 애니메이션 스크립트 유지
    class DAH {
      constructor(nodes) {
        this.nodes = [];

        Array.prototype.slice.call(nodes, 0).forEach(node => {
          this.nodes.push(new Node(node));
        });

        this._bindEvents();
      }

      _bindEvents() {
        ['_resizeHandler'].forEach(fn => this[fn] = this[fn].bind(this));
        window.addEventListener('resize', this._resizeHandler, false);
      }

      _resizeHandler() {
        this.nodes.forEach(node => node.update());
      }
    }

    class Node {
      constructor(node) {
        this.element = node;
        this._bindEvents().update();
      }

      update() {
        this.w = this.element.offsetWidth;
        this.h = this.element.offsetHeight;
        this.l = this.element.offsetLeft;
        this.t = this.element.offsetTop;
      }

      _bindEvents() {
        ['_mouseEnterHandler', '_mouseOutHandler'].forEach(fn => this[fn] = this[fn].bind(this));
        this.element.addEventListener('mouseenter', this._mouseEnterHandler, false);
        this.element.addEventListener('mouseout', this._mouseOutHandler, false);
        return this;
      }
      
      _mouseEnterHandler(ev) {
        this._addClass(ev, 'in');
      }

      _mouseOutHandler(ev) {
        this._addClass(ev, 'out');
      }

      _addClass(ev, state) {
        const direction = this._getDirection(ev);
        let class_suffix = '';

        switch (direction) {
          case 0: class_suffix = '-top'; break;
          case 1: class_suffix = '-right'; break;
          case 2: class_suffix = '-bottom'; break;
          case 3: class_suffix = '-left'; break;
        }

        this.element.className = '';
        this.element.classList.add(state + class_suffix);
      }

      _getDirection(ev) {
        const w = this.w,
          h = this.h,
          x = (ev.pageX - this.l - (w / 2) * (w > h ? (h / w) : 1)),
          y = (ev.pageY - this.t - (h / 2) * (h > w ? (w / h) : 1)),
          d = Math.round(Math.atan2(y, x) / 1.57079633 + 5) % 4;

        return d;
      }
    }

    new DAH(document.querySelectorAll('li'));
  </script>
</body>
</html>