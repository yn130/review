<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>신선Zip사</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        @font-face {
            font-family: 'BMJUA';
            src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_one@1.0/BMJUA.woff') format('woff');
            font-weight: normal;
            font-style: normal;
        }
        @font-face {
            font-family: 'Cafe24Ssurround';
            src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2105_2@1.0/Cafe24Ssurround.woff') format('woff');
            font-weight: normal;
            font-style: normal;
        }
        @font-face {
            font-family: 'Pretendard-Regular';
            src: url('https://fastly.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Regular.woff') format('woff');
            font-weight: 700;
            font-style: normal;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'BMJUA', Arial, sans-serif; 
            overflow-x: hidden;
            overflow-y: scroll;
            font-family: Arial, sans-serif;
        }

        /*** Color Variables ***/
        :root {
            --header-bg: #5661f2;
            --nav-bg: #A7E344;
            --pink: #fa6c98;
            --aqua: #A7E344;
            --accent: #ffffff;
        }

        /*** Header Styles ***/
        header {
            width: 100vw;
            height: 100px;
            background: var(--accent);
            display: flex;
            flex-direction: column;
        }

        /*** Navigation Styles ***/
        nav {
            width: 100vw;
            background: var(--nav-bg);
            display: flex;
            align-items: center;
            justify-content: flex-start;
            position: fixed;
            z-index: 10;
            padding: 10px 40px 30px 20px;
        }

        #brand {
            display: flex;
            align-items: center;
        }

        #logo {
            width: 55px;
            height: 10px;
            border-radius: 50%;
            cursor: pointer;
        }

        #word-mark {
            width: 120px;
            height: 20px;
            border-radius: 90px;
            margin-left: 20px;
            transition: all 0.3s;
        }

        /* 돋보기 아이콘 스타일 */
        .search {
            width: 90px; /* 돋보기 아이콘 크기 조정 */
            height: 70px;
            display: flex;
            justify-content: center;
            align-items: center;
            position: fixed; /* 화면의 고정된 위치에 표시 */
            top: 0px; /* 상단에서의 위치 조정 */
            right: 0px; /* 우측에서의 위치 조정 */
            cursor: pointer;
            z-index: 11; /* nav보다 위에 표시되도록 설정 */
        }

        .search-svg {
            width: 100%;
            height: 100%;
        }
        .search-svg__path {
            fill: none;
            stroke: #fff;
            stroke-width: 6px;
        }



        /*** 메뉴는 nav 아래에 위치 ***/
        #menu-container {
            position: fixed; /* 메뉴를 상단에 고정 */
            top: 55px; /* nav와의 간격 설정 */
            width: 100vw;
            display: flex;
            justify-content: center;
            background: var(--aqua);
            z-index: 9; /* 메뉴가 다른 요소보다 위에 나타나도록 설정 */
            font-family: 'BMJUA';
            font-size: 14px; /* 글자 크기 설정 */
            padding-top: 6px;
        }

        #menu {
            display: flex; /* 가로로 배치되도록 설정 */
            justify-content: center; /* 메뉴 항목들을 중앙에 정렬 */
            list-style: none; /* 점 문양 제거 */
        }
        .section-menu-li {
            display: inline-block;
            margin: 0 5px;
            position: relative;

        }

        .section-menu-li a {
            display: block;
            text-decoration: none;
            color: rgb(35, 35, 43);
            min-height: 40px;
            transition: all 0.2s;
            padding: 12px 8px;
            
        }

        .section-menu-li a:hover,
        .section-menu-li a:focus {
            color: #fff;
            display: block;
            margin: 0 auto;
            width: 100%; 
            padding-top: 8px; 
            border-bottom: 3px solid rgb(255, 255, 255); 
        }
        
        /*** Section Styles ***/
        section {
            width: 100%;
            min-height: 100vh; 
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
            align-items: flex-start;
            overflow: hidden; /* 의도하지 않은 스크롤 발생 방지 */

        }



        #section02 {
            background-color: rgb(220, 246, 255); /* 냉장우측 배경색 */
        }

        #section03 {
            background-color: rgb(195, 239, 253); /* 냉동좌측 배경색 */
        }


        #section05 {
            background-color: rgb(251, 246, 230); /* 상온 배경색 */
        }


        #logo img {
            width: 50px; /* 원하는 크기로 설정 */
            height: auto; /* 이미지의 비율을 유지하며 높이를 자동 조정 */
        }

        /* 토글 버튼 스타일 */
        #toggle {
            padding: 2px 8px;
            color: black;
            display: block;
            width: 37px;
            height: 30px;
            position: fixed; /* 위치를 고정 */
            right: 20px; /* 우측에서 20px 떨어지도록 설정 */
            bottom: 20px; /* 하단에서 20px 떨어지도록 설정 */
            z-index: 1000; /* 다른 요소들 위에 표시되도록 z-index 설정 */
            background-color: transparent;
        }

        #toggle span {
            display: block;
            width: 100%;
            height: 5px;
            background-color: #888;
            position: relative;
            transition: all 0.3s;
            backface-visibility: hidden;
            border-radius: 2px;
        }

        #toggle span:before,
        #toggle span:after {
            content: "";
            position: absolute;
            left: 0;
            width: 100%;
            height: 5px;
            background-color: #888;
            border-radius: 2px;
            transition: all 0.3s;
        }

        #toggle span:before {
            top: -9px;
        }

        #toggle span:after {
            top: 9px;
        }

        /* 토글 버튼 활성화 상태 스타일 */
        #toggle.on span {
            background-color: transparent;
        }

        #toggle.on span:before {
            transform: rotate(45deg) translate(5px, 5px);
        }

        #toggle.on span:after {
            transform: rotate(-45deg) translate(7px, -8px);
        }

        /* 말풍선 스타일 */
        #menu-popup {
            position: fixed;
            right: 20px;
            bottom: 90px;
            color: #A7E344; /* 기본 글자 색상 */
            width: 130px;
            padding: 10px;
            font-family: "Segoe UI", Candara, "Bitstream Vera Sans", "DejaVu Sans", "Bitstream Vera Sans", "Trebuchet MS", Verdana, "Verdana Ref", sans-serif;
            text-align: center;
            border-radius: 15px;
            background: #ffffff; /* 기본 말풍선 색상 흰색 */
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
            opacity: 0;
            visibility: hidden;
            transition: opacity .4s, background-color .4s;
        }

        #menu-popup:after {
            position: absolute;
            bottom: -15px;
            left: 100px;
            content: "";
            display: block;
            border-left: 10px solid transparent;
            border-right: 10px solid transparent;
            border-top: 20px solid #ffffff; /* 기본 흰색 말풍선 아래쪽 삼각형 */
        }


        .popup-ul, .popup-li, .popup-li a {
            list-style: none;
            display: block;
        }

        /* popup-link 클래스: 글자에 뉴모피즘 효과 적용 */
        .popup-link {
            border-radius: 10px;
            text-decoration: none;
            line-height: 1.0; /* 줄 간격 조정 */
            word-break: break-all; /* 단어를 강제로 줄바꿈 */
            min-height: 40px; /* 버튼의 최소 너비 설정 */
            font-family: 'BMJUA';

            background-color: transparent;
            color: #A7E344; /* 기본 글자 색상 */
            font-size: 15px;
            padding: 15px 30px;
            
            /* 글자에 뉴모피즘 효과 적용 */
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1),
                        -2px -2px 5px rgba(255, 255, 255, 0.7);
            
            /* Flexbox로 중앙 정렬 */
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            transition: color .4s;
        }

        /* Hover 시 스타일 변경 */
        .popup-link:hover,
        .popup-link:focus {
            color: #ffffff; /* 호버 시 글자색 흰색 */
            background-color: transparent;
        }

        #menu-popup:hover {
            background-color: #A7E344; /* 호버 시 말풍선 배경 색상 변경 */
        }

        #menu-popup:hover:after {
            border-top: 20px solid #A7E344; /* 호버 시 말풍선 아래쪽 삼각형 색상 변경 */
        }

        /* 토글된 메뉴 보이기 */
        #toggle.on + #menu-popup {
            opacity: 1;
            visibility: visible;
        }

        /* 큐브형태의 ingredient-box 스타일 */
        .ingredient-box {
            display: flex;
            flex-direction: column;
            align-items: center;
            /* justify-content: center; */
            width: 75px;
            height: 75px;
            border-radius: 5px;
            background-color: #ffffff;
            color: #040404;
            border: 3px solid #03a9f4;
            font-size: 14px;
            text-align: center;
            margin: 5px;
            cursor: pointer;
            font-family: 'BMJUA';
            transition: background-color 0.3s, width 0.3s, height 0.3s;
        }

        .ingredient-box:hover {
            background-color: #03a9f4;
        }

        .items-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            width: 100%; /* 부모의 넓이에 맞도록 설정 */
        }


        /* 400px 이하에서 재료 박스가 4개씩 들어가도록 설정 */
        @media (max-width: 450px) {
            .items-container {
                display: grid !important;
                grid-template-columns: repeat(4, 1fr); /* 한 줄에 4개의 아이템을 균등하게 배치 */
                padding-left: 0px; /* 좌우 패딩 제거 */
                padding-right: 0px; /* 좌우 패딩 제거 */
                width: 100%; /* 부모의 넓이에 맞도록 설정 */
                gap: 0px;

            }

            .ingredient-box {
                aspect-ratio: 1 / 1; /* 가로와 세로 비율을 1:1로 맞춰 정사각형을 유지 */
                font-size: 12px;
                box-sizing: border-box; /* 패딩과 테두리를 포함한 박스 크기를 계산 */

            }

            /* 360px 이하에서 재료 박스가 4개씩 들어가도록 설정 */
        @media (max-width: 360px) {
            .items-container {
                display: grid !important;
                grid-template-columns: repeat(3, 1fr); /* 한 줄에 4개의 아이템을 균등하게 배치 */
                padding-left: 0px; /* 좌우 패딩 제거 */
                padding-right: 0px; /* 좌우 패딩 제거 */
                width: 100%; /* 부모의 넓이에 맞도록 설정 */
                gap: 0px;
                place-items: center; /* 그리드 셀 내부의 아이템을 가로, 세로 중앙 정렬 */
            }

            .ingredient-box {
                aspect-ratio: 1 / 1; /* 가로와 세로 비율을 1:1로 맞춰 정사각형을 유지 */
                font-size: 12px;
                box-sizing: border-box; /* 패딩과 테두리를 포함한 박스 크기를 계산 */
                display: flex; /* 중앙 정렬을 위해 flexbox를 사용 */
                justify-content: center; /* 가로 중앙 정렬 */
                align-items: center; /* 세로 중앙 정렬 */

                padding-bottom: 2px;

            }

            }

            @media (max-width: 350px) {
            .section-menu-li a {
                font-size: 12px;
            }
        }

        }

    </style>
</head>
<body>

  <header>
    <nav>
        <div id="brand">
            <div id="logo">
              <img src="/images/zip.png" alt="Logo">
            </div>
            <div id="word-mark"></div>
        </div>
    </nav>
    <!-- 메뉴는 nav 아래에 위치 -->
    <div id="menu-container">
        <ul id="menu">
            <li class="section-menu-li">
                <a href="#section02" class="section-menu-a" onclick="selectSection(2, '냉장 우측')">냉장실</a>
            </li>
            <li class="section-menu-li">
                <a href="#section03" class="section-menu-a" onclick="selectSection(3, '냉동 좌측')">냉동실</a>
            </li>
            <li class="section-menu-li">
                <a href="#section05" class="section-menu-a" onclick="selectSection(5, '상온')">상온</a>
            </li>
        </ul>
    </div>
  </header>

  <div class="search" onclick="window.location.href='http://127.0.0.1:8080/search';">
    <svg class="search-svg" viewBox="0 0 320 70">
        <path class="search-svg__path" d="M160,3 L160,3 a27,27 0 0,1 0,54 L160,57 a27,27 0 0,1 0,-54 M197,67 181.21,51.21"></path>
    </svg>
  </div>

  <!-- 남은 세 개 섹션 -->
  <section id="section02"></section>
  <section id="section03"></section>
  <section id="section05"></section>

  <!-- 우측 하단에 토글 버튼 추가 -->
  <a id="toggle"><span></span></a>

  <div id="menu-popup">
        <ul>
            <li><a href="#home" class="popup-link">재료추가</a></li>
            <li><a href="http://127.0.0.1:8080/recipe" class="popup-link" id="recipe-link">남은재료<br>레시피</a></li>
            <li id="logout-button" style="display: none;">
                <a href="#logout" class="popup-link" onclick="logout()">로그아웃</a>
            </li>
        </ul>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
$(function() {
    function scrollToSectionFromParams() {
        const params = new URLSearchParams(window.location.search);
        const sectionNumber = params.get('section');
        if (sectionNumber) {
            // 숫자 값에 따라 해당 섹션으로 스크롤
            let targetSection;
            switch (sectionNumber) {
                case '2':
                    targetSection = '#section02'; // 냉장 우측
                    break;
                case '3':
                    targetSection = '#section03'; // 냉동 좌측
                    break;
                case '5':
                    targetSection = '#section05'; // 실온
                    break;
                default:
                    console.warn('Unknown section number: ' + sectionNumber);
                    return;
            }

            const target = $(targetSection);
            if (target.length) {
                $('html, body').animate({
                    scrollTop: target.offset().top - 125
                }, 500);
            }
        }
    }

    scrollToSectionFromParams();


        $('a[href*="#"]').on('click', function(e){
            const target = $($(this).attr('href'));
            if (target.length) {
                $('html,body').animate({
                    scrollTop: target.offset().top - 100
                }, 500);
            }
            e.preventDefault();
        });

        $(window).scroll(() => {
            var windowTop = $(window).scrollTop();
            windowTop > 100 ? $('nav').addClass('navShadow') : $('nav').removeClass('navShadow');
            windowTop > 100 ? $('ul').css('top','100px') : $('ul').css('top','160px');
        });

        $('#logo').on('click', () => {
            $('html,body').animate({
                scrollTop: 0
            }, 500);
        });

        $('#toggle').on('click', function () {
            $(this).toggleClass('on');
        });

        $('#menu-popup a[href="#home"]').on('click', function() {
            window.location.href = '/category';
        });

        const accessToken = sessionStorage.getItem('accessToken'); 

        if (accessToken) {
            fetch('/fridge/getFridgeDetails', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + accessToken, 
                    'Content-Type': 'application/json' 
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Unauthorized');
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    console.log('Error fetching fridge details: ' + data.error);
                    return;
                }

                const sections = data.sections;
                sections.forEach(section => {
                    let targetSection; 

                    console.log('Section name:', section.sectionName); // 디버깅: 섹션 이름 확인
                    switch (section.sectionName) {
                        case '냉장 우측':
                        case '냉장실': // 추가
                            targetSection = '#section02';
                            break;
                        case '냉동 좌측':
                        case '냉동실': // 추가
                            targetSection = '#section03';
                            break;
                        case '상온':
                            targetSection = '#section05';
                            break;
                        default:
                            console.warn('Unknown section: ' + section.sectionName);
                            return;
                    }

                    console.log('Target section ID:', targetSection); // 디버깅: 타겟 섹션 ID 확인
                    const sectionElement = document.querySelector(targetSection);
                    const itemsContainer = document.createElement('div');
                    itemsContainer.className = 'items-container';
                    sectionElement.appendChild(itemsContainer);

                    if (section.FridgeItems && section.FridgeItems.length > 0) {
                        section.FridgeItems.forEach(item => {
                            const itemElement = document.createElement('div');
                            itemElement.className = 'ingredient-box';

                            const expirationDate = new Date(item.expirationDate);
                            const today = new Date();
                            const diffTime = expirationDate - today;
                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                            const dDayText = diffDays > 0 ? `D-${diffDays}` : diffDays === 0 ? 'D-Day' : `D+${Math.abs(diffDays)}`;

                            const getColor = (days) => {
                                if (days > 3) return '#03a9f4';
                                if (days >= 1 && days <= 3) {
                                    const red = 255;
                                    const green = Math.round(194 - (days - 1) * (194 - 174) / 2);
                                    const blue = Math.round(63 - (days - 1) * (63 - 0) / 2);
                                    return `rgb(${red}, ${green}, ${blue})`;
                                }
                                if (days === 0) return 'red';
                                if (days > 0) {
                                    const red = Math.round(213 - (days - 1) * (213 - 130) / 3);
                                    const green = 0;
                                    const blue = Math.round(206 - (days - 1) * (206 - 125) / 3);
                                    return `rgb(${red}, ${green}, ${blue})`;
                                }
                                return `rgb(${128 + Math.abs(days) * 10}, 0, ${128 + Math.abs(days) * 10})`;
                            };

                            const color = getColor(diffDays);
                            const dDayContainer = document.createElement('div');
                            dDayContainer.style.border = `1px solid ${color}`;
                            dDayContainer.style.padding = '2px';
                            dDayContainer.style.width = '100%';
                            dDayContainer.style.marginBottom = '8px'; //8px 수정
                            dDayContainer.style.backgroundColor = color;
    
                            itemElement.style.border = `3px solid ${color}`;

                            const dDaySpan = document.createElement('span');
                            dDaySpan.textContent = dDayText;
                            dDaySpan.style.color = '#ffffff';
                            dDaySpan.style.fontSize = '10px';
                            dDayContainer.appendChild(dDaySpan);
                            itemElement.appendChild(dDayContainer);
    
                            const nameSpan = document.createElement('span');
                            nameSpan.textContent = item.ingredientName;
                            nameSpan.style.fontSize = '14px';
                            nameSpan.style.padding = '5px';
                            itemElement.appendChild(nameSpan);
    
                            const quantitySpan = document.createElement('span');
                            quantitySpan.textContent = `${item.quantity}개`;
                            itemElement.appendChild(quantitySpan);
                            quantitySpan.style.color = '#393939';
                            quantitySpan.style.fontSize = '10px';
                            quantitySpan.style.fontWeight = 'light';
                            quantitySpan.style.marginBottom = '7px'; // 삽입

                            itemElement.onclick = () => {
                                localStorage.setItem('selectedFridgeItemID', item.fridgeItemID);
                                window.location.href = `/ingredient/edit/${item.fridgeItemID}`;
                            };

                            itemsContainer.appendChild(itemElement);
                        });
                    } else {
                        const emptyMessage = document.createElement('div');
                        emptyMessage.textContent = '저장된 재료가 없습니다.';
                        emptyMessage.style.justifyContent= 'center';
                        emptyMessage.className = 'ingredient-box';
                        itemsContainer.appendChild(emptyMessage);
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching fridge details:', error);
            });
            // 푸시 알림 API 등록 및 구독
            registerPushNotifications();
        } else {
            console.log('유저가 로그인하지 않았습니다. 기본 냉장고 섹션만 표시합니다.');
            renderDefaultSections();
        }

        function renderDefaultSections() {
            const sectionNames = ['냉장실', '냉동실', '상온'];
            sectionNames.forEach((name, index) => {
                const sectionElement = document.createElement('div');
                sectionElement.classList.add('section');
                sectionElement.innerHTML = `<h3>${name}</h3>`;
            });
        }

// Service Worker 등록 및 푸시 알림 구독 처리
function registerPushNotifications() {
    const accessToken = sessionStorage.getItem('accessToken'); // 토큰 가져오기
    if (!accessToken) {
        console.error('로그인된 유저가 없습니다.');
        return;
    }
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/js/sw.js')
            .then(registration => {
                console.log('Service Worker 등록 성공:', registration);

                return registration.pushManager.getSubscription()
                    .then(subscription => {
                        if (subscription) {
                            return subscription;  // 이미 구독된 경우 구독 정보 반환
                        }

                        // 구독이 없는 경우 새로 구독 신청
                        const vapidPublicKey = 'BMi7Kc7hU1-QPpoy3wNR0y20Z8qPOFZ1_d7oaQK1v6LaRoryO5J7a9Fi9m_n3bO3bpQ0gCfhDzk-WGhQT88g_W4';  // 실제 VAPID 공개 키
                        const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

                        return registration.pushManager.subscribe({
                            userVisibleOnly: true,
                            applicationServerKey: convertedVapidKey
                        });
                    });
            })
            .then(subscription => {
                console.log('푸시 알림 구독 성공:', subscription);

                // 구독 정보를 서버에 전송 (Authorization 헤더 포함)
                fetch('/subscribe', {
                    method: 'POST',
                    // body: JSON.stringify({ subscription, userID }),
                    body: JSON.stringify({ subscription }),
                    headers: {
                        'Authorization': 'Bearer ' + accessToken, 
                        'Content-Type': 'application/json' 
                    }
                });
            })
            .catch(error => {
                console.error('푸시 알림 구독 실패:', error);
            });
    }
}

// VAPID 공개 키를 Uint8Array로 변환
function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
        .replace(/-/g, '+')
        .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}


  
  });
            // 로그아웃 함수

            document.addEventListener('DOMContentLoaded', () => {
            const accessToken = sessionStorage.getItem('accessToken');
            
            if (accessToken) {
                // 로그인된 상태라면 로그아웃 버튼을 표시
                document.getElementById('logout-button').style.display = 'block';
            } else {
                // 로그인이 되어 있지 않다면 로그아웃 버튼을 숨김
                document.getElementById('logout-button').style.display = 'none';
            }
        });


            function logout() {
            const accessToken = sessionStorage.getItem('accessToken');

            if (!accessToken) {
                alert('이미 로그아웃 상태입니다.');
                return;
            }

            fetch('/user/logout', {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    alert('성공적으로 로그아웃되었습니다.');
                    sessionStorage.removeItem('accessToken'); // 로그아웃 후 세션 토큰 삭제
                    localStorage.clear(); // 로그아웃 후 로컬 스토리지 비우기
                    window.location.href = 'http://127.0.0.1:8080/selectFridge'; // 로그아웃 후 URL 이동
                } else {
                    alert('로그아웃 실패. 다시 시도해주세요.');
                }
            })
            .catch(error => console.error('Error during logout:', error));
        }




    // 로그인 상태를 확인하는 함수
    function checkLoginAndRedirect() {
        const accessToken = sessionStorage.getItem('accessToken');

        if (!accessToken) {
            // 로그인되어 있지 않으면 로그인 페이지로 이동
            window.location.href = 'http://127.0.0.1:8080/user/login';
        } else {
            // 로그인되어 있으면 레시피 페이지로 이동
            window.location.href = 'http://127.0.0.1:8080/recipe';
        }
    }

    // 남은재료 레시피 링크 클릭 시 로그인 확인 후 페이지 이동
    document.getElementById('recipe-link').addEventListener('click', function(event) {
        event.preventDefault(); // 기본 링크 동작 방지
        checkLoginAndRedirect(); // 로그인 확인 후 리다이렉트
    });

    
  </script>

</body>
</html>
