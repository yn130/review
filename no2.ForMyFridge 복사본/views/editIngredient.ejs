<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"/>
    <title>신선Zip사-ingredient</title>
    
    <link href="https://fonts.googleapis.com/css?family=Oswald:400&display=swap" rel="stylesheet">

    <!-- 폰트 임포트 -->
    <style>
        @font-face {
            font-family: 'BMJUA';
            src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_one@1.0/BMJUA.woff') format('woff');
            font-weight: normal;
            font-style: normal;
        }
        /* 공통 스타일 */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'BMJUA', sans-serif;
        }
    
        /* 재료 수정 폼 스타일 */
        body {
            position: relative;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #A7E344;
        }
    
        #editIngredientFormContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1;
        }
    
        #editIngredientForm {
            color: #fff;
            background-color: transparent;
            padding: 20px;
            border-radius: 10px;
            width: 80%;
            max-width: 500px;
        }
    
        #editIngredientForm label,
        #editIngredientForm input,
        #editIngredientForm textarea,
        #editIngredientForm button,
        #editIngredientForm select {
            display: block;
            margin-bottom: 10px;
            width: 100%;
        }
    
        #editIngredientForm input,
        #editIngredientForm textarea,
        #editIngredientForm button,
        #editIngredientForm select {
            padding: 8px;
            font-size: 1em;
            border-radius: 10px;
            border: none;
            outline: none;
            box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2),
                        -3px -3px 5px rgba(255, 255, 255, 0.5);
        }
    
        #editIngredientForm button {
            background-color: #03a9f4;
            color: #fff;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }
    
        #editIngredientForm button:hover {
            background-color: #0288d1;
        }

        /* 삭제 버튼 스타일 */
        #deleteButton {
            background-color: #f44336 !important; /* 기본 색상 */ 
            color: #fff;
            border: none;
            cursor: pointer;
            width: 100%;
            padding: 12px;
            margin-top: 10px;
            font-size: 1em;
            border-radius: 10px;
            transition: background-color 0.3s;
        }

        #deleteButton:hover {
            background-color: #d32f2f !important; /* hover 시 색상 변경 */
        }
    
        /* Smoke 효과 스타일 */
        .canvasTTL p {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translateY(-50%) translateX(-50%) scale(1.0, 1.2);
            text-align: center;
            vertical-align: middle;
            margin: auto;
            letter-spacing: 0px;
            font-family: 'Black Han Sans', sans-serif;
            font-size: 6vw;
            color: #fff;
            z-index: 1;
        }

        @media screen and (max-width: 1024px) {
            .canvasTTL p {
                font-size: 12vw;
            }
        }

        #myCanvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        #myCanvas canvas {
            background: #A7E344;
            height: 100%;
            width: 100%;
            position: absolute;
        }
    </style>
</head>
<body>
    <!-- Smoke Effect -->
    <div id="myCanvas">
        <canvas></canvas>
    </div>
    <div class="canvasTTL">
    </div>

    <!-- 재료 수정 폼 -->
    <div id="editIngredientFormContainer">
        <form id="editIngredientForm">
            <input type="hidden" name="fridgeItemID" value="<%= fridgeItem.fridgeItemID %>">
            
            <label for="ingredientName">재료 이름:</label>
            <input type="text" id="ingredientName" name="ingredientName" value="<%= fridgeItem.Ingredient.ingredientName %>" disabled>
            
            <label for="sectionID">상세 위치(섹션):</label>
            <select id="sectionID" name="sectionID">
                <% sections.forEach(section => { %>
                    <option value="<%= section.sectionID %>" <%= section.sectionID === fridgeItem.sectionID ? 'selected' : '' %>><%= section.sectionName %></option>
                <% }); %>
            </select>

            <label for="quantity">수량:</label>
            <input type="number" id="quantity" name="quantity" value="<%= fridgeItem.quantity %>">
        
            <label for="expirationDate">유통기한:</label>
            <input type="date" id="expirationDate" name="expirationDate" value="<%= fridgeItem.expirationDate.toISOString().split('T')[0] %>">
        
            <label for="registrationDate">구매일:</label>
            <input type="date" id="registrationDate" name="registrationDate" value="<%= fridgeItem.registrationDate.toISOString().split('T')[0] %>">
        
            <label for="memo">메모:</label>
            <textarea id="memo" name="memo"><%= fridgeItem.memo %></textarea>
        
            <button type="submit">저장하기</button>
            <!-- 삭제 버튼 -->
            <button id="deleteButton">삭제하기</button>
        </form>
    </div>


    <script>
        // 서버에서 전달된 fridgeType을 사용합니다.
        const fridgeType = "<%= fridgeType %>"; // 서버에서 전달된 fridgeType
    
        document.getElementById('editIngredientForm').addEventListener('submit', async function(event) {
            event.preventDefault(); // 폼 제출 방지
    
            const formData = new FormData(this);
            const fridgeItemID = formData.get('fridgeItemID');
            const sectionID = formData.get('sectionID');  
            const quantity = formData.get('quantity');
            const expirationDate = formData.get('expirationDate');
            const registrationDate = formData.get('registrationDate');  
            const memo = formData.get('memo');
    
            const accessToken = sessionStorage.getItem('accessToken');
    
            try {
                const response = await fetch(`/ingredient/edit/${fridgeItemID}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + accessToken,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ sectionID, quantity, expirationDate, registrationDate, memo }) 
                });
    
                if (response.ok) {
                    alert('재료가 성공적으로 수정되었습니다.');
    
                    // 냉장고 타입에 따라 리디렉트 처리
                    let redirectUrl = '/fridge';
                    switch (fridgeType) {
                        case 'fourDoors':
                            redirectUrl = '/fridge/fourDoors';
                            break;
                        case 'doubleDoors':
                            redirectUrl = '/fridge/doubleDoors';
                            break;
                        case 'nomalType':
                            redirectUrl = '/fridge/nomalType';
                            break;
                        default:
                            redirectUrl = '/fridge/kimchiType';
                    }
    
                    window.location.href = redirectUrl; 
                } else {
                    const errorData = await response.json();
                    alert('수정 중 오류가 발생했습니다: ' + errorData.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('서버 통신 중 오류가 발생했습니다.');
            }
        });

        // 삭제 버튼 이벤트 처리
document.getElementById('deleteButton').addEventListener('click', async function(event) {
    event.preventDefault(); // 폼 제출 방지
    const fridgeItemID = document.querySelector('input[name="fridgeItemID"]').value;
    const accessToken = sessionStorage.getItem('accessToken');

    if (confirm('이 재료를 정말 삭제하시겠습니까?')) {
        try {
            const response = await fetch(`/ingredient/delete/${fridgeItemID}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json',
                }
            });

            if (response.ok) {
                alert('재료가 성공적으로 삭제되었습니다.');

                // 냉장고 타입에 따라 리디렉트 처리
                let redirectUrl = '/fridge';
                switch (fridgeType) {
                    case 'fourDoors':
                        redirectUrl = '/fridge/fourDoors';
                        break;
                    case 'doubleDoors':
                        redirectUrl = '/fridge/doubleDoors';
                        break;
                    case 'nomalType':
                        redirectUrl = '/fridge/nomalType';
                        break;
                    default:
                        redirectUrl = '/fridge/kimchiType';
                }

                window.location.href = redirectUrl;
            } else {
                const errorData = await response.json();
                alert('삭제 중 오류가 발생했습니다: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('서버 통신 중 오류가 발생했습니다.');
        }
    }
});

    </script>
</body>
</html>
