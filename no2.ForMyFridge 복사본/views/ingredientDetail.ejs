<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"/>
    <title>신선Zip사-ingredient</title>
    
    <link href="https://fonts.googleapis.com/css?family=Oswald:400&display=swap" rel="stylesheet">

    <!-- 폰트 임포트 -->
    <style>
@font-face {
            font-family: 'BMJUA';
            src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_one@1.0/BMJUA.woff') format('woff');
            font-weight: normal;
            font-style: normal;
        }
        /* 공통 스타일 */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'BMJUA', sans-serif; /* 모든 요소에 Black Han Sans 폰트 적용 */
        }
    
        /* 재료 추가 폼 스타일 */
        body {
            position: relative;
            overflow: hidden; /* 폼이 캔버스 밖으로 넘치지 않도록 설정 */
        }
    
        #addIngredientFormContainer {
            position: fixed; /* 화면 전체를 차지하도록 설정 */
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1; /* Smoke 효과 위에 표시 */
        }
    
        #addIngredientForm {
            color: #fff; /* 글자 색상을 흰색으로 설정 */
            background-color: transparent; /* 약간 투명한 검정 배경 */
            padding: 20px;
            border-radius: 10px;
            width: 80%; /* 폼의 너비를 조정 */
            max-width: 500px; /* 최대 너비 설정 */
        }
    
        #addIngredientForm label,
        #addIngredientForm input,
        #addIngredientForm textarea,
        #addIngredientForm button,
        #addIngredientForm select {
            display: block;
            margin-bottom: 10px;
            width: 100%;
        }
    
        #addIngredientForm input,
        #addIngredientForm textarea,
        #addIngredientForm button,
        #addIngredientForm select {
            padding: 8px;
            font-size: 1em;
            border-radius: 10px; /* 둥근 모서리 */
            border: none;
            outline: none;
            box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2), /* 어두운 그림자 */
                        -3px -3px 5px rgba(255, 255, 255, 0.5); /* 밝은 그림자 */
        }
    
        #addIngredientForm button {
            background-color: #03a9f4;
            color: #fff;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }
    
        #addIngredientForm button:hover {
            background-color: #0288d1;
        }
    
        /* Smoke 효과 스타일 */
        .canvasTTL p {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translateY(-50%) translateX(-50%) scale(1.0, 1.2);
            text-align: center;
            vertical-align: middle;
            margin: auto;
            letter-spacing: 0px;
            font-family: 'Black Han Sans', sans-serif; /* Smoke 텍스트에도 Black Han Sans 폰트 적용 */
            font-size: 6vw;
            color: #fff;
            z-index: 1; /* Smoke 텍스트를 위에 배치 */
        }
        @media screen and (max-width: 1024px) {
            .canvasTTL p {
                font-size: 12vw;
            }
        }
        #myCanvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1; /* Smoke 배경을 뒤에 배치 */
        }
        #myCanvas canvas {
            background: #A7E344; 
            height: 100%;
            width: 100%;
            position: absolute;
        }
    
        /* 숨기기 위한 스타일 */
        .hidden {
            display: none !important; /* 요소를 숨깁니다 */
        }
    </style>
    
</head>
<body>
    <!-- Smoke Effect -->
    <div id="myCanvas">
        <canvas></canvas>
    </div>
    <div class="canvasTTL">
    </div>

    <!-- 재료 추가 폼 -->
    <div id="addIngredientFormContainer">
        <form id="addIngredientForm">
            <h2 style="color: #fff;">재료 추가</h2><br>

            <label for="categoryName">카테고리:</label>
            <input type="text" id="categoryName" name="categoryName" readonly>

            <label for="ingredientName">재료 이름:</label>
            <input type="text" id="ingredientName" name="ingredientName" readonly>

            <label for="sectionID">상세위치:</label>
            <select id="sectionID" name="sectionID" required></select>

            <label for="quantity">수량:</label>
            <input type="number" id="quantity" name="quantity" required min="1">

            <label for="registrationDate">구매일:</label>
            <input type="date" id="registrationDate" name="registrationDate">

            <label for="expirationDate">유통기한:</label>
            <input type="date" id="expirationDate" name="expirationDate">

            <label for="memo">메모:</label>
            <textarea id="memo" name="memo"></textarea>

            <button type="submit">추가</button>
        </form>
    </div>

    <script>
        
    // 재료 추가 기능 스크립트
    window.onload = function() {
        const fridgeID = localStorage.getItem('fridgeID');
        const selectedIngredient = JSON.parse(localStorage.getItem('selectedIngredient'));

        if (!fridgeID) {
            alert('Fridge ID가 없습니다. 다시 로그인 해주세요.');
            window.location.href = '/user/login';
            return;
        }

        document.getElementById('ingredientName').value = selectedIngredient.ingredientName;
        document.getElementById('registrationDate').value = new Date().toISOString().split('T')[0];

        const accessToken = sessionStorage.getItem('accessToken');
        const categoryID = selectedIngredient.categoryID;

        fetch('/ingredient/detail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken
            },
            body: JSON.stringify({ fridgeID, categoryID })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert('데이터를 불러오는 중 오류가 발생했습니다: ' + data.error);
                return;
            }

            document.getElementById('categoryName').value = data.categoryName;
            const sectionDropdown = document.getElementById('sectionID');

            data.sections.forEach(section => {
                const option = document.createElement('option');
                option.value = section.sectionID;
                option.text = section.sectionName;
                sectionDropdown.appendChild(option);
            });
        })
        .catch(error => console.error('Error fetching ingredient details:', error));
    };

    document.getElementById('addIngredientForm').addEventListener('submit', function(event) {
        event.preventDefault();

        const fridgeID = localStorage.getItem('fridgeID');
        const sectionID = document.getElementById('sectionID').value;
        const ingredientName = document.getElementById('ingredientName').value;
        const categoryID = JSON.parse(localStorage.getItem('selectedIngredient')).categoryID;
        const quantity = document.getElementById('quantity').value;
        const registrationDate = document.getElementById('registrationDate').value;
        const expirationDate = document.getElementById('expirationDate').value;
        const memo = document.getElementById('memo').value;
        const accessToken = sessionStorage.getItem('accessToken');

         // 수량이 입력되지 않았을 때 경고
         if (!quantity) {
            alert('수량을 입력해주세요.');
            return;
        }

        // 구매일이 입력되지 않았을 때 경고
        if (!registrationDate) {
            alert('구매일을 입력해주세요.');
            return;
        }

        // 유통기한이 입력되지 않았을 때 경고
        if (!expirationDate) {
            alert('유통기한을 입력해주세요.');
            return;
        }

        // 유통기한이 구매일보다 빠를 때 경고
        if (expirationDate < registrationDate) {
            alert('유통기한이 구매일보다 빠릅니다. 유통기한을 확인해주세요.');
            return;
        }

        fetch('/ingredient/save', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken
            },
            body: JSON.stringify({
                fridgeID,
                sectionID,
                ingredientName,
                categoryID,
                quantity,
                registrationDate,
                expirationDate,
                memo
            })
        })
        .then(response => response.json())
        .then(data => {
            // 첫 번째 코드의 fetch 후 성공적으로 추가되었을 때 리디렉션 수정 부분
            if (data.message === '재료 추가 성공') {
    alert('재료가 성공적으로 추가되었습니다.');

    // 선택한 냉장고 타입과 섹션 ID에 따라 URL 리디렉션
    const fridgeTypeID = localStorage.getItem('selectedFridgeType'); // fridgeTypeID를 로컬 스토리지에서 가져옴
    const sections = JSON.parse(localStorage.getItem('sections')); // 저장된 섹션 목록
    const sectionID = document.getElementById('sectionID').value; // 선택된 섹션 ID

    let fridgeTypeName = '';

    switch (fridgeTypeID) {
        case '1':
            fridgeTypeName = 'fourDoors';
            break;
        case '2':
            fridgeTypeName = 'doubleDoors';
            break;
        case '3':
            fridgeTypeName = 'normalType';
            break;
        case '4':
            fridgeTypeName = 'kimchiType';
            break;
        default:
            fridgeTypeName = 'unknown';
            break;
    }

    // 섹션 이름을 숫자로 변환
    const sectionMapping = {
        '냉장 좌측': 1,
        '냉장 우측': 2,
        '냉동 좌측': 3,
        '냉동 우측': 4,
        '상온': 5
    };

    const selectedSection = sections.find(section => section.sectionID == sectionID);
    if (!selectedSection) {
        console.warn('선택된 섹션을 찾을 수 없습니다. 섹션 ID:', sectionID);
        return;
    }
    
    const sectionName = selectedSection.sectionName;
    const sectionNumber = sectionMapping[sectionName];

    if (!sectionNumber) {
        console.warn('섹션 이름에 해당하는 번호를 찾을 수 없습니다. 섹션 이름:', sectionName);
        return;
    }

    console.log('섹션 이름:', sectionName, '섹션 번호:', sectionNumber); // 디버깅용 로그 추가

    // 해당 냉장고 타입의 URL로 리디렉션, 숫자 형태의 섹션 정보 포함
    window.location.href = `http://127.0.0.1:8080/fridge/${fridgeTypeName}?section=${sectionNumber}`;
}
 else {
    alert('재료 추가 실패: ' + data.message);
}

        })
        .catch(error => console.error('Error adding ingredient:', error));
    });


    </script>
</body>
</html>
