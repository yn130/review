<<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>회원가입</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: white;
            background-color: black;
            margin: 0;
        }
        fieldset {
            border: 1px solid #ccc;
            padding: 30px;
            width: 600px;
            height: 450px;
            background-color: #000000;
        }
        legend {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 20px;
            color: white;
        }
        .register {
            width: 100%;
        }
        label {
            margin-bottom: 10px;
            width: 80px;
            margin-top: -10px;
        }
        .input-container {
            margin-top: 30px;
        }
        input[type="text"], input[type="id"], input[type="password"] {
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: calc(100% - 150px);
            box-sizing: border-box;
            background-color: transparent;
            color: white;
        }
        .id-container, .nickname-container, .password-container {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }
        .id-container button, .nickname-container button {
            padding: 10px;
            color: white;
            background-color: black;
            border-radius: 5px;
            cursor: pointer;
            width: 100px;
            box-sizing: border-box;
            margin-top: -20px; /* 버튼을 더 위로 이동 */
        }
        .register-button {
            float: right;
            margin-top: 30px;
            width: 20%;
        }
        .id-container button:hover, .nickname-container button:hover {
            background-color: black;
            text-decoration: underline;
        }
        #nickname, #userid {
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: calc(100% - 150px);
            box-sizing: border-box;
        }
        #password {
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: calc(100% - 190px);
            box-sizing: border-box;
            margin-left: -7px; /* 비밀번호 글자와 입력창 사이의 간격 조절 */
        }
        #nickname-check-result, #id-check-result {
            font-size: 0.7em;
            margin-top: 10px; /* 마진을 줄여 메시지를 입력창에 더 가깝게 */
            margin-bottom: 20px; /* 메시지와 다음 요소 사이에 마진 추가 */
            color: white;
        }
        button {
            padding: 10px;
            background-color: white;
            color: black;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 20%;
            box-sizing: border-box;
        }
        button:hover {
            background-color: #3D0402;
        }
        a {
            display: block;
            margin-top: 20px;
            text-align: start;
            color: white;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <div class="container">
        <fieldset>
            <legend>회원가입</legend>
            <form name="form_register" class="register" enctype="multipart/form-data" method="POST" action="/user/signup">
                <div class="input-container">
                    <div class="nickname-container">
                        <label for="nickname">닉네임⠀⠀</label>
                        <input id="nickname" type="text" name="nickname" placeholder="nickname" required />
                        <button type="button" onclick="checkDuplicate('nickname')">중복 확인</button>
                    </div>
                    <p id="nickname-check-result"></p>
                    <div class="id-container input-icon">
                        <label for="userid">아이디⠀</label>
                        <input id="userid" type="text" name="userid" placeholder="ID" required disabled onfocus="checkNicknameFirst()" />
                        <button type="button" onclick="checkDuplicate('userid')" disabled>중복 확인</button>
                    </div>
                    <p id="id-check-result"></p>
                    <div class="password-container">
                        <label for="password">비밀번호⠀⠀</label>
                        <input id="password" type="password" name="password" placeholder="password" required disabled onfocus="checkNicknameFirst()" />
                    </div>
                </div>
                <button type="submit" onclick="register(event);" class="register-button" disabled>가입</button>
            </form>
            <a href="/user/login">로그인</a>
        </fieldset>
    </div>
    <script>
        let isNicknameChecked = false;
        let isIdChecked = false;
        const nicknameInput = document.getElementById('nickname');
        const userIdInput = document.getElementById('userid');
        const passwordInput = document.getElementById('password');
        const registerButton = document.querySelector('.register-button');
        function validatePassword(password) {
            const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$/;
            return passwordRegex.test(password);
        }
        function checkDuplicate(type) {
    const value = type === 'nickname' ? nicknameInput.value : userIdInput.value;
    const url = `/user/check-${type === 'nickname' ? 'nickname' : 'id'}`;
    const checkResult = document.getElementById(`${type === 'nickname' ? 'nickname-check-result' : 'id-check-result'}`);
    console.log(`Sending request to ${url} with value: ${value}`); // 요청이 보내지는지 확인하는 로그
    console.log(`checkResult for ${type}:`, checkResult); // 요소가 제대로 선택되었는지 확인하는 로그
    if (!checkResult) {
        console.error(`Element with id ${type}-check-result not found.`);
        return;
    }
    axios.post(url, { [type]: value })
        .then(response => {
            console.log('Response:', response.data); // 응답 데이터 로그
            checkResult.textContent = response.data.message;
            checkResult.style.color = response.data.available ? 'skyblue' : 'red';
            if (type === 'nickname') {
                isNicknameChecked = response.data.available;
                if (isNicknameChecked) {
                    enableIdInput();
                }
            } else if (type === 'userid') {
                isIdChecked = response.data.available;
                if (isIdChecked) {
                    enablePasswordInput();
                }
            }
        })
        .catch(error => {
            console.error('Error:', error); // 오류 로그
            checkResult.textContent = '오류가 발생했습니다.';
            checkResult.style.color = 'red';
            if (type === 'nickname') isNicknameChecked = false;
            if (type === 'userid') isIdChecked = false;
        });
}
        function checkNicknameFirst() {
            if (!isNicknameChecked) {
                alert('닉네임 중복 확인을 먼저 해주세요.');
                nicknameInput.focus();
            }
        }
        function register(event) {
            event.preventDefault();
            const userId = userIdInput.value;
            const password = passwordInput.value;
            const nickname = nicknameInput.value;
            if (!validatePassword(password)) {
                alert('비밀번호가 유효하지 않습니다. 최소 6자 이상, 영어, 숫자, 특수문자를 포함해야 합니다.');
                return;
            }
            if (!isNicknameChecked) {
                alert('닉네임 중복 확인을 해주세요.');
                return;
            }
            if (!isIdChecked) {
                alert('아이디 중복 확인을 해주세요.');
                return;
            }
            axios.post('/user/signup', { userid: userId, password: password, nickname: nickname })
                .then(res => {
                    console.log(res);
                    editCancel();
                    window.location.href = '/user/login';
                })
                .catch(error => {
                    console.error('Error in register:', error);
                    if (error.response && error.response.data) {
                        alert(error.response.data.message);
                    }
                });
        }
        function editCancel() {
            nicknameInput.value = '';
            userIdInput.value = '';
            passwordInput.value = '';
        }
        function enableIdInput() {
            userIdInput.disabled = false;
            document.querySelector('.id-container button').disabled = false;
        }
        function enablePasswordInput() {
            passwordInput.disabled = false;
            registerButton.disabled = false;
        }
    </script>
</body>
</html>
