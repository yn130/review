<!DOCTYPE html>
<html lang="en">
    
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comment Modal</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: black;
            color: white;
        }
        .comment-form {
            margin-bottom: 20px;
            position: relative;
        }
        .comment-form input {
            width: 80%;
            padding: 10px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }
        .char-counter {
            position: absolute;
            left: 78%;
            bottom: 15px;
            color: gray;
            font-size: 12px;
        }
        .comment-form button {
            padding: 10px 20px;
            border: none;
            background-color: rgb(174, 35, 27);
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }
        .comment-form button:hover {
            background-color: rgb(200, 50, 50);
        }
        .comment {
            border-bottom: 1px solid #ccc;
            padding: 10px 0;
        }
        .comment-header {
            display: flex;
            justify-content: space-between;
        }
        .comment-body {
            margin: 10px 0;
        }
        .comment-footer {
            display: flex;
            align-items: center;
        }
        .likes {
            margin-right: 10px;
        }
        .comment-action {
            cursor: pointer;
            color: rgb(174, 35, 27);
        }
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .pagination button {
            padding: 10px 20px;
            margin: 0 5px;
            border: none;
            background-color: rgb(174, 35, 27);
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }
        .pagination button:hover {
            background-color: rgb(200, 50, 50);
        }
        .pagination button:disabled {
            background-color: grey;
            cursor: default;
        }
         /* 필요 시 top-comment 클래스를 제거하거나 유지할 수 있습니다. */
        .top-comment {
            /* border: 2px solid gold;
            background-color: rgba(255, 223, 0, 0.1); */
            border-radius: 5px;
        }
        
    </style>
</head>
<body>
    <h2>댓글 내용</h2>
    <div class="comment-form">
        <input type="text" id="comment-input" placeholder="댓글을 입력하세요">
        <span class="char-counter" id="char-counter">0</span>
        <button id="add-comment" data-card-id="<%= cardId %>">추가</button>
    </div>

    <div id="comments-container">
        <!-- 댓글 목록 여기에 추가  -->
        <% if (comments.length === 0) { %>
            <div class="no-comments">아직 입력된 댓글이 없습니다.</div>
        <% } else { %>
            <% comments.forEach((comment, index) => { %>
                <% const isTopComment = index < 2; %> <!-- 상위 2개의 댓글을 식별 -->
                <div class="comment <%= isTopComment ? 'top-comment' : '' %>" data-id="<%= comment.comment_id %>">
                    <div class="comment-header">
                        <div class="comment-author"><%= comment.User.nickname %></div>
                        <div class="comment-options"><%= new Date(comment.createdAt).toLocaleDateString() %></div>
                    </div>
                    <div class="comment-body">
                        <%= comment.comment_contents %>
                    </div>
                    <div class="comment-footer">
                        <span class="likes"><%= comment.likeCount %></span> <!-- 좋아요 수를 나타내는 부분 -->
                        <span class="comments">0</span> <!-- 댓글 수를 나타내는 부분 -->
                        <span class="comment-action" data-comment-id="<%= comment.comment_id %>" data-card-id="<%= comment.card_id %>">좋아요</span> <!-- 좋아요 버튼에 card_id 추가 -->
                        <% if (user && user.userId === comment.userid) { %>
                            <button class="edit-comment">수정</button>
                            <button class="delete-comment">삭제</button>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        <% } %>
    </div>
    
    <!-- 페이지네이션 컨테이너 -->
    <div class="pagination" id="pagination"></div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            console.log('window.opener',window.opener); // 추가된 콘솔 로그
            const commentInput = document.getElementById('comment-input');
            const addCommentButton = document.getElementById('add-comment');
            const commentsContainer = document.getElementById('comments-container');
            const charCounter = document.getElementById('char-counter');
            const paginationContainer = document.getElementById('pagination');
            const commentsPerPage = 5;
            let currentPage = <%= JSON.stringify(currentPage) %>;
            let comments = <%- JSON.stringify(comments) %>;
            let totalPages = <%= JSON.stringify(totalPages) %>;
            let user = JSON.parse('<%- JSON.stringify(user) %>');
            const updateCharCount = () => {
                charCounter.textContent = commentInput.value.length;
            };
            commentInput.addEventListener('input', updateCharCount);
            const addComment = () => {
                const text = commentInput.value.trim();
                const cardId = addCommentButton.getAttribute('data-card-id');
                if (!user) {
                    alert('먼저 로그인을 해주세요');
                    // window.location.href = '/user/login'; // 로그인 페이지로 이동
                    // commentInput.value = '';
                    // return;
                    window.parent.postMessage('login', '*'); // 부모 창으로 메시지 전송
                    return;
                }
                if (text) {
                    fetch('/comment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ comment_contents: text, card_id: cardId }),
                        credentials: 'include' // 쿠키를 포함하도록 설정
                    }).then(response => {
                        if (response.ok) {
                            response.json().then(data => {
                                location.reload(); // 댓글 추가 후 페이지 새로고침
                            });
                            commentInput.value = '';
                            updateCharCount();
                        } else {
                            alert('댓글 추가 실패.');
                        }
                    }).catch(error => {
                        console.error('Error posting comment:', error);
                        alert('댓글 추가 실패.');
                    });
                } else {
                    alert('댓글을 입력하세요.');
                }
            };
            addCommentButton.addEventListener('click', addComment);
            commentInput.addEventListener('keyup', (event) => {
                if (event.key === 'Enter') {
                    addComment();
                }
            });
            const createComment = (comment, index) => {
                // 상위 2개의 댓글이고 좋아요 수가 1 이상인 경우에만 'top-comment' 클래스를 추가합니다.
                const isTopComment = index < 2 && comment.likeCount > 0;
                const commentDiv = document.createElement('div');
                commentDiv.className = 'comment' + (isTopComment ? ' top-comment' : '');
                commentDiv.dataset.id = comment.comment_id;
                const commentHeader = document.createElement('div');
                commentHeader.className = 'comment-header';
                const commentAuthor = document.createElement('div');
                commentAuthor.className = 'comment-author';
                commentAuthor.textContent = comment.User ? comment.User.nickname : '익명';
                // 순위에 따라 이모지를 추가합니다.
                if (isTopComment) {
                    const emoji = document.createElement('span');
                    emoji.style.marginLeft = '10px';
                    if (index === 0) {
                        emoji.textContent = ':1등_🥇'; // 1순위
                    } else if (index === 1) {
                        emoji.textContent = ':2등_🥈'; // 2순위
                    }
                    commentAuthor.appendChild(emoji);
                }
                const commentOptions = document.createElement('div');
                commentOptions.className = 'comment-options';
                commentOptions.textContent = new Date(comment.createdAt).toLocaleDateString('ko-KR', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\./g, '/').replace(/\s/g, '');
                if (user && user.userId === comment.userid) {
                    const editButton = document.createElement('button');
                    editButton.className = 'edit-comment';
                    editButton.textContent = '수정';
                    editButton.addEventListener('click', () => {
                        editComment(commentDiv);
                    });
                    const deleteButton = document.createElement('button');
                    deleteButton.className = 'delete-comment';
                    deleteButton.textContent = '삭제';
                    deleteButton.addEventListener('click', () => {
                        deleteComment(commentDiv);
                    });
                    commentOptions.appendChild(editButton);
                    commentOptions.appendChild(deleteButton);
                }
                commentHeader.appendChild(commentAuthor);
                commentHeader.appendChild(commentOptions);
                const commentBody = document.createElement('div');
                commentBody.className = 'comment-body';
                commentBody.textContent = comment.comment_contents;
                const commentFooter = document.createElement('div');
                commentFooter.className = 'comment-footer';
                const likesSpan = document.createElement('span');
                likesSpan.className = 'likes';
                likesSpan.textContent = comment.likeCount || '0';
                const likeButton = document.createElement('span');
                likeButton.className = 'comment-action';
                likeButton.innerHTML = '좋아요 <span class="thumb">🔥</span>';
                likeButton.setAttribute('data-card-id', comment.card_id);
                likeButton.addEventListener('click', () => {
                    toggleLike(comment.comment_id, comment.card_id, likesSpan);
                });
                commentFooter.appendChild(likesSpan);
                commentFooter.appendChild(likeButton);
                commentDiv.appendChild(commentHeader);
                commentDiv.appendChild(commentBody);
                commentDiv.appendChild(commentFooter);
                commentsContainer.appendChild(commentDiv);
            };
            const toggleLike = async (commentId, cardId, likesSpan) => {
                if (!user) {
                    alert('먼저 로그인을 해주세요');
                    return;
                }
                try {
                    const response = await fetch('/comment/like', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ comment_id: commentId, card_id: cardId }),
                        credentials: 'include' // 쿠키를 포함하도록 설정
                    });
                    if (response.ok) {
                        const data = await response.json();
                        likesSpan.textContent = data.likeCount;
                        // 좋아요 수 변경 후 댓글 목록을 다시 가져와서 업데이트
                        comments = data.comments;
                        totalPages = data.totalPages;
                        displayComments(currentPage);
                        setupPagination(totalPages);
                    } else {
                        alert('좋아요 처리 실패.');
                    }
                } catch (error) {
                    console.error('Error toggling like:', error);
                    alert('좋아요 처리 실패.');
                }
            };
            const editComment = (comment) => {
                const commentBody = comment.querySelector('.comment-body');
                const newText = prompt('댓글을 수정하세요:', commentBody.textContent);
                if (newText) {
                    fetch(`/comment/edit/${comment.dataset.id}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ comment_contents: newText }),
                        credentials: 'include' // 쿠키를 포함하도록 설정
                    }).then(response => {
                        if (response.ok) {
                            commentBody.textContent = newText;
                        } else {
                            alert('댓글 수정 실패.');
                        }
                    });
                }
            };
            const deleteComment = (comment) => {
                if (confirm('정말로 이 댓글을 삭제하시겠습니까?')) {
                    fetch(`/comment/delete/${comment.dataset.id}`, {
                        method: 'DELETE',
                        credentials: 'include' // 쿠키를 포함하도록 설정
                    }).then(response => {
                        if (response.ok) {
                            comments = comments.filter(c => c.comment_id !== comment.dataset.id);
                            totalPages = Math.ceil(comments.length / commentsPerPage);
                            if (currentPage > totalPages) {
                                currentPage = totalPages;
                            }
                            location.reload();
                        } else {
                            alert('댓글 삭제 실패.');
                        }
                    });
                }
            };
            const displayComments = (page) => {
                commentsContainer.innerHTML = '';
                const start = (page - 1) * commentsPerPage;
                const end = start + commentsPerPage;
                const paginatedComments = comments.slice(start, end);
                paginatedComments.forEach((comment, index) => {
                    createComment(comment, index);
                });
            };
            const setupPagination = (totalPages) => {
                paginationContainer.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement('button');
                    button.textContent = i;
                    button.addEventListener('click', () => {
                        currentPage = i;
                        displayComments(currentPage);
                        setupPagination(totalPages);
                    });
                    if (i === currentPage) {
                        button.disabled = true;
                    }
                    paginationContainer.appendChild(button);
                }
            };
            displayComments(currentPage);
            setupPagination(totalPages);
            updateCharCount();
        });
        // 새로 추가된 코드: 창이 닫힐 때 부모 창에 메시지를 보냄
        window.addEventListener('beforeunload', function () {
            if (window.opener && !window.opener.closed) {
                window.opener.postMessage('reload', '*');
            }
        });
    </script>
</body>
</html>
